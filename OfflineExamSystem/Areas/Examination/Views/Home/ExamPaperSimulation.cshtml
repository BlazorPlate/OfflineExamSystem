@using PagedList.Mvc;
@using PagedList;
@model OfflineExamSystem.Areas.Examination.ViewModels.QuestionViewModel
@{
    var totalQuestion = Model.TotalQuestionInSet;
    var endTime = ((DateTime)ViewBag.TimeExpire);
    var timeRemaining = TimeSpan.FromTicks(endTime.Ticks - DateTime.Now.Ticks).TotalSeconds.ToString("#");
    ViewBag.Title = "Exam Paper";
}
@using (Html.BeginForm("PostAnswerSimulation", "Home", FormMethod.Post, new { @id = "form" }))
{
    <input type="hidden" name="Direction" id="direction" @*value="forward"*@ />
    <input type="hidden" name="Token" value="@(Session["TOKEN"])" />
    <input type="hidden" name="ExamId" value="@(Model.ExamId)" />
    <input type="hidden" name="QuestionId" id="QuestionId" value="@(Model.QuestionNumber)" />
    <!-- Widget ID (each widget will need unique ID)-->
    <div class="jarviswidget" id="wid-id-10" data-widget-colorbutton="false" data-widget-togglebutton="false" data-widget-editbutton="false" data-widget-fullscreenbutton="false" data-widget-deletebutton="false">
        <header>
            <div class="widget-toolbar pull-left">
                @Html.PagedListPager((IPagedList)ViewBag.OnePagePerQuestion, page => Url.Action("ExamPaper", new { @token = Session["TOKEN"], page }), new PagedListRenderOptions { MaximumPageNumbersToDisplay = 10 })
            </div>
            <div class="widget-toolbar pull-right">
                <input type="button" name="finish" id="finish" class="btn btn-primary" value="@Resources.Resources.FinishExam" />
            </div>
            <div class="widget-toolbar pull-right">
                <strong> @Resources.Resources.TimeRemaining: </strong>
                <span id="minRemaining"></span>:<span id="secRemaining"></span>
            </div>
        </header>
        <!-- widget div-->
        <div>
            <!-- widget content -->
            <div class="widget-body no-padding">
                <div class="padding-10">
                    <h1><b>@Resources.Resources.Question @(Model.QuestionNumber)</b></h1><hr />
                    <div class="row">
                    <div class="col-lg-6">
                        <p>@Html.Raw(Model.Question ?? "")</p>
                        @switch (Model.QuestionType)
                        {
                            case "MULTIPLE":
                                <p><b>@Resources.Resources.ChooseCorrect</b></p>
                                <ul id="checkList" class="js_choices">
                                    @for (int i = 0; i < Model.Options.Count; i++)
                                    {
                                        <li>
                                            <label class="checkbox">
                                                <input type="hidden" name="UserChoices[@i].ChoiceId" value="@Model.Options[i].ChoiceId" />
                                                <input id="@Model.Options[i].ChoiceId" type="checkbox" name="UserChoices[@i].IsChecked" @(!string.IsNullOrEmpty(Model.Options[i].Answer) ? "CHECKED" : "") />

                                                <i></i>@Html.Raw(Model.Options[i].Label.Replace("[", "&lt;").Replace("]", "&gt;"))
                                            </label>
                                        </li>
                                    }
                                </ul>
                                <input type="hidden" name="Answer" />
                                break;
                            case "TEXT":
                                <div class="prelude">@Resources.Resources.WriteThoughts</div>
                                <div>
                                    <p>
                                        <input type="hidden" name="UserChoices[0].ChoiceId" value="@Model.Options[0].ChoiceId" />
                                        <textarea name="Answer" class="form-control">@(Model.Options[0].Answer)</textarea>
                                    </p>
                                </div>
                                break;
                        }

                    </div>
                    <div  class="col-lg-6">
                        <div id="resultType" class="alert fade in">
                            <button class="close hidden" data-dismiss="alert">
                                ×
                            </button>
                            <i id="icon" class="fa-fw fa"></i>
                            <strong id="result"></strong><br /><span id="hint"></span>
                        </div>
                    </div>
                    </div>
                </div>

                <div class="widget-footer">
                    <div class="pull-left padding-bottom-5">
                        <input class="btn btn-primary m-r-10" type="button" id="correct" name="correct" value="@Resources.Resources.ValidateAnswer" />
                        <a href="javascript:void(0);" class="btn btn-sm btn-primary" onclick="saveBackward(this);">
                            @Resources.Resources.Previous
                        </a>
                        <a id="nextButton" href="javascript:void(0);" class="btn btn-sm btn-primary" onclick="saveForward(this);">
                            @Resources.Resources.Next
                        </a>
                    </div>
                </div>
            </div>

        </div>
        <!-- end widget content -->
    </div>
    <!-- end widget div -->
}

@section scripts{
    <script>
    var remSeconds = @timeRemaining;
        var secondsCounter = remSeconds % 60;
        if (secondsCounter==0) {
            secondsCounter = 59;
        }
    function formatNumber(number)
    {
        if(number < 10) return '0' + number;
        else return '' + number;

    }
    function startTick()
    {
        document.getElementById('secRemaining').innerText = formatNumber(secondsCounter);
        document.getElementById('minRemaining').innerText = formatNumber(parseInt(remSeconds/60));
        var _tick = setInterval(function()
        {
            if(remSeconds > 0)
            {
                remSeconds = remSeconds-1;
                secondsCounter = secondsCounter - 1;
                document.getElementById('secRemaining').innerText = formatNumber(secondsCounter);
                document.getElementById('minRemaining').innerText = formatNumber(parseInt(remSeconds/60));
                if(secondsCounter==0)
                    secondsCounter = 60;
            }
            else {
                clearInterval(_tick);
                window.location.href = '@Url.Action("Completion", "Home", new { hasExpired = false,token= Session["TOKEN"] })'.replace(/&amp;/g, '&');
            }
        }, 1000);
    }
    startTick();
    function saveForward(sender) {
        $('#direction').val('forward');
        document.getElementById('form').submit();
    }
    function saveBackward(sender) {
        $('#direction').val('backward');
        document.getElementById('form').submit();
    }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $("#finish").click(function () {
                window.location.href = '@Url.Action("Completion", "Home", new { hasExpired = false,token= Session["TOKEN"] })'.replace(/&amp;/g, '&');
            })
        });
    </script>
    <script>
        $(document).ready(function () {
            $('ul.js_choices li input[type="radio"]').on('click', function () {
                var parentul = $(this).closest('ul.js_choices');
                $.each(parentul.find('input[type="radio"][name!="' + $(this).attr('name') + '"]:checked'), function (i, e) {
                    $(e).prop('checked', false);
                });
            });
        })
    </script>
    <script type="text/javascript">
        $("#nextButton").hide();
        $(document).ready(function () {

            $("#correct").click(function () {
                var answers = [];
                $("#checkList :checkbox:checked").each(function () {
                    var value = $(this).attr("id");

                    answers.push(value);
                });
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetHintByQuestionId")',
                    dataType: 'json',
                    data: { questionId: $("#QuestionId").val(), answers: answers  },
                    success: function (hint) {
                        var result = $.parseJSON(hint);
                        $("#hint").empty();
                        $("#result").empty();
                        if (result['Key'] == 'true') {
                            $("#icon").removeClass('fa-times').removeClass('fa-warning').addClass('fa-check');
                            $("#resultType").removeClass('alert-warning').removeClass('alert-danger').addClass('alert-success');
                            $("#result").append('@Resources.Resources.TrueAnswer');
                            $("#hint").append(result['Value']);
                            $("#nextButton").show();
                        }
                        if (result['Key'] == 'false') {
                            $("#icon").removeClass('fa-check').removeClass('fa-warning').addClass('fa-times');
                            $("#resultType").removeClass('alert-warning').removeClass('alert-success').addClass('alert-danger');
                            $("#result").append('@Resources.Resources.WrongAnswer');
                            $("#hint").append(result['Value']);
                            $("#nextButton").show();
                        }
                        if (result['Key'] == 'na') {
                            $("#icon").removeClass('fa-check').removeClass('fa-warning').addClass('fa-warning');
                            $("#resultType").removeClass('alert-success').removeClass('alert-danger').addClass('alert-warning');
                            $("#result").append('@Resources.Resources.SpecifyAnswer');
                        }
                    },
                    error: function (ex) {
                        alert('Failed to retrieve question hint.' + ex);
                    }
                });
                return false;
            })
        });
    </script>
}﻿
