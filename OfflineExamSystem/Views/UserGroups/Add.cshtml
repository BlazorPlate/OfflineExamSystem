@model OfflineExamSystem.Models.ApplicationUserGroup

@using (Ajax.BeginForm("Add", "UserGroups", null, new AjaxOptions()
{
    HttpMethod = "POST",
    UpdateTargetId = "addContainer",
    OnSuccess = "OnSuccessAdd",
}, new { @id = "addGroup" }))
{
    @Html.AntiForgeryToken()
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">
                <span aria-hidden="true">&times;</span>
            </button>
            <h3 class="modal-title">@Resources.Resources.Add</h3>
        </div>
        <div class="modal-body">
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.ApplicationUserId)
            <div class="form-horizontal">
                <h4>@Resources.Resources.Group</h4>
                <hr/>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.ApplicationGroupId, new { placeholder = Resources.Resources.ChooseGroup })
                        @Html.ValidationMessageFor(model => model.ApplicationGroupId, "", new { @class = "text-danger" })
                    </div>
                </div>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        </div>
        <div class="modal-footer">
            <button type="submit" class="btn btn-primary"><i class="fa fa-save"></i> @Resources.Resources.Save</button>
            <button type="button" class="btn btn-default" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i> @Resources.Resources.Close</button>
        </div>
    </div>
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    <!--Roles Select2 Script -->

}
<script>
        $(document).ready(function () {
        //The url we will send our get request to
        var roleUrl = '@Url.Action("GetGroups", "UserGroups",new {userId= Model.ApplicationUserId })';
        var pageSize = 20;
            $('#ApplicationGroupId').select2(
            {
            width: 'resolve',
            tags: true,
            formatNoMatches: function (term) {
                return '@Resources.Resources.NoResult';
                    },
            formatSearching:function (term) {
                return '@Resources.Resources.Searching';
                },
            //Does the role have to enter any data before sending the ajax request
            minimumInputLength: 0,
            allowClear: true,
            ajax: {
                //How long the role has to pause their typing before sending the next request
                quietMillis: 150,
                //The url of the json service
                url: roleUrl,
                dataType: 'jsonp',
                //Our search term and what page we are on
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    //Used to determine whether or not there are more results available,
                    //and if requests for more data should be sent in the infinite scrolling
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                },
            }
        });

    });
    $('#ApplicationGroupId').css('width', '100%');
</script>